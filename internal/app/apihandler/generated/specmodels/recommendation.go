// Code generated by go-swagger; DO NOT EDIT.

package specmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Recommendation recommendation
//
// swagger:model Recommendation
type Recommendation struct {

	// articul
	// Required: true
	Articul string `json:"articul"`

	// barcode
	// Required: true
	Barcode *string `json:"barcode"`

	// price
	// Required: true
	Price int64 `json:"price"`

	// shop name
	// Required: true
	ShopName string `json:"shopName"`

	// url
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this recommendation
func (m *Recommendation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArticul(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBarcode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShopName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Recommendation) validateArticul(formats strfmt.Registry) error {

	if err := validate.RequiredString("articul", "body", m.Articul); err != nil {
		return err
	}

	return nil
}

func (m *Recommendation) validateBarcode(formats strfmt.Registry) error {

	if err := validate.Required("barcode", "body", m.Barcode); err != nil {
		return err
	}

	return nil
}

func (m *Recommendation) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", int64(m.Price)); err != nil {
		return err
	}

	return nil
}

func (m *Recommendation) validateShopName(formats strfmt.Registry) error {

	if err := validate.RequiredString("shopName", "body", m.ShopName); err != nil {
		return err
	}

	return nil
}

func (m *Recommendation) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this recommendation based on context it is used
func (m *Recommendation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Recommendation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Recommendation) UnmarshalBinary(b []byte) error {
	var res Recommendation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
